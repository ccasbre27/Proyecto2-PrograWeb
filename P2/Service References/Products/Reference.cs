//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace P2.Products {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Products.IProducts")]
    public interface IProducts {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/GetAll", ReplyAction="http://tempuri.org/IProducts/GetAllResponse")]
        Entities.Product[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/GetAll", ReplyAction="http://tempuri.org/IProducts/GetAllResponse")]
        System.Threading.Tasks.Task<Entities.Product[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Get", ReplyAction="http://tempuri.org/IProducts/GetResponse")]
        Entities.Product Get(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Get", ReplyAction="http://tempuri.org/IProducts/GetResponse")]
        System.Threading.Tasks.Task<Entities.Product> GetAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Add", ReplyAction="http://tempuri.org/IProducts/AddResponse")]
        Entities.Product Add(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Add", ReplyAction="http://tempuri.org/IProducts/AddResponse")]
        System.Threading.Tasks.Task<Entities.Product> AddAsync(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Update", ReplyAction="http://tempuri.org/IProducts/UpdateResponse")]
        Entities.Product Update(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Update", ReplyAction="http://tempuri.org/IProducts/UpdateResponse")]
        System.Threading.Tasks.Task<Entities.Product> UpdateAsync(Entities.Product product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Delete", ReplyAction="http://tempuri.org/IProducts/DeleteResponse")]
        void Delete(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProducts/Delete", ReplyAction="http://tempuri.org/IProducts/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int productId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductsChannel : P2.Products.IProducts, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductsClient : System.ServiceModel.ClientBase<P2.Products.IProducts>, P2.Products.IProducts {
        
        public ProductsClient() {
        }
        
        public ProductsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Entities.Product[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Entities.Product[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Entities.Product Get(int productId) {
            return base.Channel.Get(productId);
        }
        
        public System.Threading.Tasks.Task<Entities.Product> GetAsync(int productId) {
            return base.Channel.GetAsync(productId);
        }
        
        public Entities.Product Add(Entities.Product product) {
            return base.Channel.Add(product);
        }
        
        public System.Threading.Tasks.Task<Entities.Product> AddAsync(Entities.Product product) {
            return base.Channel.AddAsync(product);
        }
        
        public Entities.Product Update(Entities.Product product) {
            return base.Channel.Update(product);
        }
        
        public System.Threading.Tasks.Task<Entities.Product> UpdateAsync(Entities.Product product) {
            return base.Channel.UpdateAsync(product);
        }
        
        public void Delete(int productId) {
            base.Channel.Delete(productId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int productId) {
            return base.Channel.DeleteAsync(productId);
        }
    }
}
