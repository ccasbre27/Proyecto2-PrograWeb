//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace P2.Users {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Users.IUsers")]
    public interface IUsers {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/GetAll", ReplyAction="http://tempuri.org/IUsers/GetAllResponse")]
        Entities.User[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/GetAll", ReplyAction="http://tempuri.org/IUsers/GetAllResponse")]
        System.Threading.Tasks.Task<Entities.User[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Get", ReplyAction="http://tempuri.org/IUsers/GetResponse")]
        Entities.User Get(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Get", ReplyAction="http://tempuri.org/IUsers/GetResponse")]
        System.Threading.Tasks.Task<Entities.User> GetAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Add", ReplyAction="http://tempuri.org/IUsers/AddResponse")]
        Entities.User Add(Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Add", ReplyAction="http://tempuri.org/IUsers/AddResponse")]
        System.Threading.Tasks.Task<Entities.User> AddAsync(Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Update", ReplyAction="http://tempuri.org/IUsers/UpdateResponse")]
        Entities.User Update(Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Update", ReplyAction="http://tempuri.org/IUsers/UpdateResponse")]
        System.Threading.Tasks.Task<Entities.User> UpdateAsync(Entities.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Delete", ReplyAction="http://tempuri.org/IUsers/DeleteResponse")]
        void Delete(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsers/Delete", ReplyAction="http://tempuri.org/IUsers/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersChannel : P2.Users.IUsers, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersClient : System.ServiceModel.ClientBase<P2.Users.IUsers>, P2.Users.IUsers {
        
        public UsersClient() {
        }
        
        public UsersClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UsersClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UsersClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Entities.User[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Entities.User[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Entities.User Get(int userId) {
            return base.Channel.Get(userId);
        }
        
        public System.Threading.Tasks.Task<Entities.User> GetAsync(int userId) {
            return base.Channel.GetAsync(userId);
        }
        
        public Entities.User Add(Entities.User user) {
            return base.Channel.Add(user);
        }
        
        public System.Threading.Tasks.Task<Entities.User> AddAsync(Entities.User user) {
            return base.Channel.AddAsync(user);
        }
        
        public Entities.User Update(Entities.User user) {
            return base.Channel.Update(user);
        }
        
        public System.Threading.Tasks.Task<Entities.User> UpdateAsync(Entities.User user) {
            return base.Channel.UpdateAsync(user);
        }
        
        public void Delete(int userId) {
            base.Channel.Delete(userId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int userId) {
            return base.Channel.DeleteAsync(userId);
        }
    }
}
